{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "RXJS",
  "steps": [
    {
      "file": "package.json",
      "description": "### La librairie rxjs\nrxjs est une librarie permettant de créer plus facilement des programmes asynchrones ou basé sur des évenements. Elle permet de gérer des séquences d'évenements de manière [fonctionnelle](https://www.youtube.com/watch?v=0qj949uJQ7w)",
      "line": 15
    },
    {
      "file": "observable.ts",
      "description": "### Les observables\nLes observables sont similaires au promises c'est à dire qu'elle poussent (push system)les données de leur propre gré comme on le vera au prochain tour.",
      "line": 3
    },
    {
      "file": "push_pull.ts",
      "description": "### Push vs Pull\n\nUn exemple de pull system sont les fonctions en js. Imaginons une fonction nommé hello, lorsque que j'appelle la fonction à la ligne 5, le console.log s'éxécute  et m'affiche mon string \"Hello\" dans la console.\n\nDonc j'ai tiré (pull) la données et je l'ai eu directement. ",
      "line": 1
    },
    {
      "file": "push_pull.ts",
      "description": "### Les promises\nLes promises sont un type de push system, puisque c'est elles qui décident du transfère de données. Ici à la ligne 16 nous devons atttendre 1s (à cause du setTimout de la ligne 10) que la promise s'éxécute et nous renvoie l'info.\n\nDonc j'attend que la promise me pousse (Push) la donnée qui m'intéresse.",
      "line": 8
    },
    {
      "file": "push_pull.ts",
      "description": "# Pour conclure \n|                  | Producteur | Consomateur |\n| ---------------- | ---------------- | ---------------- |\n|        Pull System         | Passif: produit la donnée quand on lui demande    | Actif: Décide de quand la donnée est besoin    |\n|        Push System         | Active: Produit la donnée quand il le décide    | Passif: Doit attendre de recevoir la données    |",
      "line": 18
    },
    {
      "file": "observable.ts",
      "description": "### Fonction vs Observable\n\nUn observables peut retourner plusieurs valeurs différentes \n***Voir FooObservable*** \ntandis qu'une fonction ne pourra pas.***Voir la fonction foo***.\n\n",
      "line": 23
    },
    {
      "file": "observable.ts",
      "description": "### Souscrire à un observable\nIci à la ligne 46 et 47 on peut voir 2 différentes souscription à l'observable. C'est pour bien montré chacune des souscriptions sont bien indépendantes l'une de l'autre montrant bien qu'un observable est différent des émetteurs d'évenements qui eux partages le même évenement aux souscripteurs.",
      "line": 46
    },
    {
      "file": "observable.ts",
      "description": "Dans un observable, on peut délivré de la donnée à l'infini sauf si une erreur ou une notification de completion est délivré dans ce cas la. Plus aucune donné ne sera délivré.\n\nIci à la ligne 54 nous terminons l'observable donc toutes les données qui pourraient être envoyé après cette ligne ne le seront pas.",
      "line": 56
    },
    {
      "file": "observable.ts",
      "description": "De même ici,si il se passe un problème dans votre logique et qu'une erreur apparaît. Le subscriber.error de la ligne 65 sera déclencher et arrêtre l'exécution directement.",
      "line": 67
    },
    {
      "file": "error_observable.ts",
      "description": "Voici un exemple ici d'éxécution arrêté par un catch.\nIl vous suffit de taper `tsc` à la racine du projet et puis `node dist/error_observable.js`",
      "line": 16
    },
    {
      "file": "observer.ts",
      "description": "### Qu'est ce qu'un observer \nUn observer est consommateur de valeur, c'est un ensemble de callback, une pour chaque type de notification: *next, error ou complete*\nGrâce à ces 3 callbacks vous pourrez indiquer une action à effectuer pour chaque cas.",
      "line": 17
    },
    {
      "file": "unsubscribe.ts",
      "description": "### Souscription\nUne souscription représente l'éxecution d'un observable, il est possible de faire 2 choses avec ces souscriptions.\n*Voir prochains steps --->*",
      "line": 7
    },
    {
      "file": "unsubscribe.ts",
      "description": "### Lié 2 souscription\n\nIl est possible de lier 2 souscription pour pour ensuite pouvoir les annuler en même temps \n*Voir prochain --->*",
      "line": 9
    },
    {
      "file": "unsubscribe.ts",
      "description": "### Annuler des souscriptions\n\nIci Après avoir lier les 2 souscriptions, nous les annulons d'un coup à la ligne 13 avec la fonction unsubscribe.",
      "line": 14
    }
  ],
  "ref": "rxjs_observables"
}